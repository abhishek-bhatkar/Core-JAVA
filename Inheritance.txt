1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.Also show, if needed how will u invoke parent class constructor from child class ?

class base
{
	int num1=10;
	void disp1()
	{
		System.out.println(num1);
	}
	base(int num1)
	{
		this.num1=num1;
		System.out.println("in base param");
	}
}
class sub1 extends base   
{
	sub1(int num1) 
	{
		super(num1);
		
	}
	int num2=20;
	void disp2()
	{
		System.out.println(num2);
	}
}
class sub2 extends sub1
{
	int num3=30;
	void disp3()
	{
		System.out.println(num3);
	}
	sub2(int num3)
	{	super(num3);
		this.num3=num3;
	}
}
public class Inheri_Assign1
{
	public static void main(String args[])
	{
		sub2 s1=new sub2(10); 
		s1.disp1();
		s1.disp2();
		s1.disp3();
	}
}


2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler. How will u override "start()" method of parent class ?

class Vehicle
{
	public void start()
	{
	System.out.println("in vehicle");
	}
}
class FourWheeler extends Vehicle
{
	public void start()
	{
	System.out.println("in FourWheeler");
	}
}
public class Demo2
{
	public static void main(String args[])
	{
	FourWheeler f=new FourWheeler();
	f.start();
	}
}

3) Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.

class Base
{
	public Base()
	{
		System.out.println("In Base");
	}
}
class Sub1 extends Base
{
	public Sub1()
	{
		System.out.println("In Sub1");
	}
}
class Sub2 extends Base
{
	public Sub2()
	{
		System.out.println("In Sub2");
	}
}
public class Demo3
{
public static void main(String args[])
	{
		Sub1 s1=new Sub1();
		Sub2 s2=new Sub2();
	}
}

4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.

class Top1
{
	public void disp1()
	{
		System.out.println("In Top1");
	}
	public void disp2()
	{
		System.out.println("In Top1");
	}
	public void disp3()
	{
		System.out.println("In Top1");
	}
}
class Bottom1 extends Top1
{
	public void disp1()
	{
		System.out.println("In Bottom1");
	}
}
class Bottom2 extends Top1
{
	public void disp1()
	{
		System.out.println("In Bottom2");
	}
}
class Bottom3 extends Top1
{
	public void disp1()
	{
		System.out.println("In Bottom3");
	}
}
public class Demo4
{
	public static void show(Top1 ref)
	{
	ref.disp1();
	} 
public static void main(String args[])
	{	System.out.println("Overriding");
		Bottom1 b1=new Bottom1();
		b1.disp1();
		Bottom2 b2=new Bottom2();
		b2.disp1();
		Bottom3 b3=new Bottom3();
		b3.disp1();
		
		System.out.println("Dynamic Polymorphism");
		show(new Bottom1());
	}
}

5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.

abstract class Shape
{
	abstract void draw();
}
class Triangle extends Shape
{
	void draw()
	{
		System.out.println("in Triangle draw");
	}
}
class Circle extends Shape
{
	void draw()
	{
		System.out.println("in Circle draw");
	}
}

class Poly extends Shape
{
	void draw()
	{
		System.out.println("in Poly draw");
	}
}
public class Demo5
{
	static void perform(Shape ref)
	{
		ref.draw();
	}

	public static void main(String args[])
{
		Shape arr[]=new Shape[3];
		arr[0]=new Triangle();
		arr[1]=new Poly();
		arr[2]=new Circle();

		for(int i=0;i<arr.length;i++)
		{
			{
				perform(arr[i]);

			}
		}
}
}


6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.

interface A
{
	void disp1();//public and abstract
}

interface B extends A
{
	void disp2();
}

class C implements B
{
	public void disp1()
	{
		System.out.println("Int A");
	}
	public void disp2()
	{
		System.out.println("Int B");
	}
	void disp3()
	{
		System.out.println("Class C");
	}
	
}

public class Demo6
{
	public static void main(String args[])
	{
		C c1=new C();
		c1.disp1();
		c1.disp2();
		c1.disp3();
		
	}
}

7) Define class "Parent1" with some data.
Define interface "Parent2" with some data.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.

interface parent2
{
	void disp2();
}

class Parent1
{
	void disp1()
	{
		System.out.println("In class parent1");
	}
}

class Child extends Parent1 implements parent2
{
	public void disp2()
	{
		System.out.println("In child class from interface contract");
	}
}
public class Demo7
{
	public static void main(String args[])
	{
	
		Child c=new Child();
		c.disp2();
		c.disp1();
	}
}

8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.

class Base1
{
	Base1(int n)
	{
	System.out.println("Parameterised base1");
	}
}
class Sub1 extends Base1
{
	Sub1()
	{
	}
	Sub1(int n)
	{
	System.out.println("Parameterised Sub1");
	}
	Sub1(int n,int n1)
	{
	System.out.println("Two parameterised Sub1");
	}
}
public class Demo8
{
	public static void main(String args[])
	{
	Sub1 s1=new Sub1();
	Sub1 s2=new Sub1(4);
	Sub1 s3=new Sub1(4,9);
	}
}

9) create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.

interface Game
{
	void play();
}
class Cricket implements Game
{
	public void play()
	{
		System.out.println("Playing cricket");
	}
}
class Football implements Game
{
	public void play()
	{
		System.out.println("Playing football");
	}
}
class Tennis implements Game
{
	public void play()
	{
		System.out.println("Playing tennis");
	}
}


public class Demo9
{
	static void perform(Game ref)
	{
		ref.play();
	}

	public static void main(String args[])
	{
		perform(new Cricket());

		perform(new Football());

		perform(new Tennis());

	}
}













